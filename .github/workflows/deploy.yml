name: Deploy Application

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      #     cache: 'npm'

      # - name: Install dependencies
      #   run: npm install

      # - name: Build assets
      #   run: npm run build

      # - name: Configure AWS Credentials with OIDC
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-region: us-east-1
      #     role-to-assume: arn:aws:iam::614575055279:role/github-actions
      #     role-session-name: github-actions-session

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build and push Docker image
      #   run: |
      #     docker build --no-cache -f deploy/Dockerfile -t 614575055279.dkr.ecr.us-east-1.amazonaws.com/shaula:latest .
      #     docker push 614575055279.dkr.ecr.us-east-1.amazonaws.com/shaula:latest

      - name: Create .env file for production
        run: |
          echo "APP_NAME=${{ vars.APP_NAME }}" >> .env
          echo "APP_PORT=${{ vars.APP_PORT }}" >> .env
          echo "APP_ENV=${{ vars.APP_ENV }}" >> .env
          echo "APP_DEBUG=${{ vars.APP_DEBUG }}" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
          echo "DB_CONNECTION=${{ vars.DB_CONNECTION }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
          echo "MEILISEARCH_KEY=${{ secrets.MEILISEARCH_KEY }}" >> .env
          echo "MEILISEARCH_PORT=${{ vars.MEILISEARCH_PORT }}" >> .env
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env
          echo "FILESYSTEM_DISK=local" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> .env
          echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> .env
          echo "AWS_URL=${{ secrets.AWS_URL }}" >> .env
          echo "AWS_ENDPOINT=${{ secrets.AWS_ENDPOINT }}" >> .env
          echo "AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}" >> .env

      - name: Copy .env file to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: '.env'
          target: '/home/ubuntu/app'

      - name: Copy Dockerfile to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'deploy/Dockerfile'
          target: '/home/ubuntu/app'
          strip_components: 1

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'deploy/docker-compose.yml'
          target: '/home/ubuntu/app'
          strip_components: 1

      - name: Copy nginx.conf to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'deploy/nginx.conf'
          target: '/home/ubuntu/app'
          strip_components: 1

      - name: Copy
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: '.'
          target: '/home/ubuntu/app/var/www'

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/app

            docker compose down -v

            sudo systemctl restart docker

            sudo mkdir -p /etc/nginx/conf.d/
            sudo touch /etc/nginx/conf.d/default.conf

            cd /home/ubuntu/app/var/www
            composer install --no-dev --optimize-autoloader
            composer require league/flysystem-aws-s3-v3 "^3.0" --with-all-dependencies
            cd /home/ubuntu/app

            # Move os arquivos para os locais corretos
            # mv deploy/docker-compose.yml ./docker-compose.yml

            # O .env, docker-compose.yml e nginx.conf já foram copiados
            # O login no ECR precisa ser feito para o docker-compose puxar a imagem
            # aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 614575055279.dkr.ecr.us-east-1.amazonaws.com/shaula

            # docker compose pull

            # Inicia os contêineres usando o arquivo docker-compose que foi copiado
            docker compose up -d --build --no-deps --force-recreate -d --remove-orphans

            # docker compose cp app:/var/www ./var/www

            # sleep 30

            docker compose exec app php artisan storage:link
            docker compose exec app php artisan config:cache
            docker compose exec app php artisan route:cache
            docker compose exec app php artisan view:cache
            docker compose exec app php migrate:fresh --seed

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd /home/ubuntu/app/var/www/; npm install; npm run build
